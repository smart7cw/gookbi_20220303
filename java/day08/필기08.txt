[필기08]

2. This
  2-1. 자기 자신을 의미하는 키워드
    - 클래스 안에서 this를 사용하여 "자기 자신"을 표현한다.

  2-2. this를 사용하여 지역변수와 전역변수 구분하기

	class Student {
		String name;
		public void setName(){
			String name;		// 변수충돌 없음! 이유는 아래.
			name = "자바학생";
		}
	}
    - 전역변수와 지역변수가 동일한 이름으로 공존할 경우, "유효성 범위가 작은" 변수가 우선적으로 인식된다.
    - 전역변수의 범위는 클래스 전체 > 지역변수의 범위는 블록 내부
    - 따라서 위 "자바학생"은 지역변수 name에 할당된다.

    - 전역변수를 인식하는 방법으로는 this.xxx 를 사용하는 방법이 있다.
	class Student {
		String name;
		public void setName(){
			String name;		// 변수충돌 없음.
			name = "자바학생";		// 우선 인식되는 지역변수에 할당된다.
			this.name = "JSP학생";	// this에 의해 전역변수에 할당된다.
		}
	}

    - this를 사용해서 파라미터와 멤버변수 구하기
	-> 메서드 파라미터도 해당 메서드 안에서만 유효한 지역변수의 일종이다.
	-> 파라미터를 사용하여 멤버변수의 값을 간접적으로 설정할 경우,
	이름은 동일하게 지정하고 this 키워드를 사용하여 멤버변수와 파라미터를 구별하여 작성하는게
	java언어의 일반적인 처리 방식이다.
	
	class Student {
		String name;
		public void setName(String name) {		// 이 name은 setName메서드 내에서만 사용 가능한 지역변수
			// 입력받은 지역변수 name의 값을 전역변수 name에 할당하고자 한다.
			// 다음과 같이 작성하면 된다.
			this.name = name;
		}
	}

	ex) Student x = new Student();
	// x.name = "자바학생" 이라 쓰지 않고도 메서드를 사용하여 멤버변수 name에 값을 할당할 수 있게 된다.
	x.setName("자바학생");

    - "모든" 멤버변수 앞에 this 키워드를 사용하여 직관적으로 표시하는 것이 소스코드의 가독성을 위해 바람직하다.
    - 즉, 같은 이름의 지역변수가 없어도 보편적으로 this를 붙여준다.


-------------------------------------------------------------------------------------------------------------------------------------
1. this
  1-1. 현재 클래스의 메서드를 의미하는 용도로서의 this
   - 메서드의 경우 this.yyy()이 아닌, yyyy()만 사용하더라도 코드 가독성의 문제는 없다. 
    - 따라서 메서드는 통상적으로 this를 쓰지 않고 호출한다.

  1-2. this 키워드를 활용한 멤버변수와 메서드의 접근
    - 멤버변수는 지역변수와 구별하기 위하여 가급적 this를 통해 접근한다.
    - 멤버변수와는 달리 메서드에 접근할 때 this 키워드를 사용하는 것이 필수적인 것은 아니다.

2. 클래스, 메서드, 상수의 이름 규칙
  2-1. 공통 이름 규칙
    - 영어, 숫자, 언더바(_)의 조합. 첫 글자는 반드시 영어로 표기한다. (외우지 않아도 됨. 에러나면 수정하기)

  2-2. 클래스 이름 규칙
    - 첫 글자는 대문자로 시작한다. 나머지 글자는 소문자로 표기한다.
    - 두 개 이상의 단어를 조합하는 경우 새로운 단어는 대문자로 시작한다.
	ex) class Student / MyClass / NetworkHelper / ...

  2-3. 메서드, 변수 이름 규칙
    - 대부분 소문자로 표기한다. 두개 이상의 단어를 조합하는 경우 새로운 단어는 언더바 또는 대문자로 시작한다.
	ex) int age / user_name / userName / ...
    - 메서드 이름은 기능을 따라가는 게 좋다. 기능을 동사, 기능대상을 명사로 해서 동사 + 명사 로 표기하는 게 직관적이다. 
	ex) public void getName() / setAge() / ...

  2-4. 상수 이름 규칙
    - 모두 대문자료 표시한다.
	ex) final double PI / COLOR / ...

3. 생성자
(기술면접에 매우 많이 나온다. 신입, 이직자 모두에게 많이 물어보는 개념이다.)
  3-1. 생성자란?

	Student std = new Student();	  //Student는 클래스. std는 객체. Student()는 생성자.

    - new 키워드를 사용하여 객체가 생성될 때 자동으로 실행되는 특수한 형태의 메서드.
    - 리턴형을 명시하지 않으며, 메서드의 이름은 클래스의 이름과 항상 동일하다.

	class Student {  ...  }
	Student std = new Student();	//나는 앞에 Student라는 메서드/생성자를 생성한 적 없음.
	// Student클래스의 {  ...  } 안에 존재하는 Student(){..}라는 생성자를  java컴파일러가 자동으로 실행하기 때문이다.

    - 자동으로 실행된다는 특성 때문에, 객체가 생성되면서 해당 객체의 특성(멤버변수 등)을 초기화하기 위하여 사용된다.
	

  3-2. 기본 생성자
    - 파라미터가 없는 생성자.
    - 클래스에 특별히 생성자가 정의되지 않은 경우, java컴파일러는 기본 생성자가 존재한다고 인식한다.
	class Student {
		Student() {
			// 자동으로 생성해준다. 생성자는 있지만, 내용이 비어 있다.
		}
	}

  3-3. 생성자의 활용
    - 생성자는 멤버변수의 값을 초기화하기 위해 사용한다.

  3-4. 파라미터를 갖는 생성자
    - 생성자도 메서드의 일종이므로 파라미터를 함께 정의하는 것이 가능하다.


1:00:00부터






