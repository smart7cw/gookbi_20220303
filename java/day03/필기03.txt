----------------------------------------------------------------------------
1. 연산자
  1-1. 논리연산자
    - 두 개 이상의 비교연산자의 결과나 boolean에 대해 추가로 "AND" 나 "OR" 연산을 추가로 수행하여 결과를 얻는다.
  1-2. AND의 의미를 갖는 "&&"
    - "&&"연산자는 두개의 boolean을 비교하여 모두 true인 경우에만 결과값이 true이다.
    - 아이디 && 비밀번호 가 모두 참이어야 로그인(true)이 된다.
	boolean result 1 = true && true  // True가 할당된다.
	boolean result 2 = true && false  // False가 할당된다.
	boolean result 3 = false && true  // F
	boolean result 4 = false && false  // F
	
	int num1 = 100;
	int num2 = 200;
	(num1 <= num2) && (num1 != num2)  // 둘 다 true이므로 결과값도 true
	//괄호 없어도 똑같은 결과가 나온다.

  1-3. OR의 의미를 갖는 "||"
    - "||" 연산자는 두 개의 boolean을 비교하여 둘 줄 하나라도 true인 경우 결과값이 true이다.
    - 2호선 || 8호선 둘 중 하나만 역삼역을 지난다면 잘 도착(true)할 수 있다.
	boolean result 1 = true || true  // True가 할당된다.
	boolean result 2 = true || false  // True가 할당된다.
	boolean result 3 = false || true  // T
	boolean result 4 = false || false  // F
	
	int num1 = 100;
	int num2 = 200;
	!(num1 > num2)  // 괄호내부가 false이므로 결과는 True이다. 
	(num1 != num2) || (num1 >= num2)  // T||F이므로 결과는 True이다.
	!(num1 != num2) || (num1 >= num2)  // F||F이므로 결과는 True이다.

2. 형변환(Casting)
  2-1. 형변환
    - 변수의 자료형이 변환되는 것을 의미한다.
    - 특정 자료형의 값을 다른 자료형의 변수에 대입할 수 있다.
    - "암묵적" 형변환과 "명시적" 형변환 두 가지 종류가 있다.
    ex) int로 선언해놓은 변수를 값을 double값으로 바꿔 할당하고 싶다.

  2-2. 암묵적 형변환 
    - 서로 다른 자료형을 연산 혹은 대입하는 경우, java컴파일러가 자료형을 통일한다.
       이 과정에서 발생하는 형변환을 암묵적 형변환이라고 한다.

	long a = 100;	// 정수형
	float b = a;	// 정수형을 실수형에 대입. 실수형 100.000~으로 자동 변환된다.

    - 암묵적 형변환은 어떤 변수가 더 큰 범위(바이트크기)의 변수로 대입될 때 발생한다.
    - 암묵적 형변환은 데이터의 손실이 발생하지 않는 범위 내에서만 이루어진다.
	-> int형 데이터를 2^31-1을 byte에 대입하는 경우 표현이 불가능하므로 에러가 발생한다.
	-> double형 데이터 20.5를 int에 대입하는 경우에는 0.5에 대한 데이터 손실이 불가피하므로, 에러가 발생한다.

	byte -> short -> int -> long -> float -> double
              	            char  -> int -> long -> float -> double

    - 서로 다른 형태의 변수 간 연산시 작은 범위의 변수가 암묵적으로 큰 범위 데이터형으로 변환되어 연산된다.
	double a = 10.5d;
	float b = 20.5f;
	float f = a + b;	// 에러 발생
	double d = a + b;	// 결과는 31.0d. f가 연산시 double형으로 바뀜.

  2-3. 명시적 형변환 
    - 데이터의 손실을 감수하더라도, 강제로 형변환 시키는 형태

	자료형 b = (변환할 목표 자료형)a;

    - 실수형을 정수형으로 변환하는 경우 소수점 이하 자리는 버려진다.

	double a = 3.14d;	// 3.14
	int b = (int)a;	// 결과는 3 (0.14 버려짐)

    - 서로 다른 형태의 변수의 연산 시에도 명시적 형변환을 수행할 수 있다.
	double a = 10.5d;
	float b = 20.5f;
	double d = a + b;	// 결과는 31.0d
	float f = (float) a+b;	// 결과는 31.0f

3. 조건문
  3-1. 조건문 이란?
    - 무조건 실행되는 것이 아니라, 특정 조건을 충족할 경우에만 실행되는 구문

  3-2. 조건문의 종류
    - if문
	: 주어진 조건이 참(true)일 경우에만 실행된다.
    - if ~ else문
	: 주어진 조건이 참(true)일 경우 if문, 그렇지 않을 경우 else문이 실행된다.
    - if ~ else if ~ else문
	: 조건을 여러개로 세분화하여 사용하는 if문이다.
    - switch문
	: 하나의 값에 대해서 어려가지 경우의 수로 나누어 분기한다.  ex) 1은 x실행, 2는 y실행,...

  3-3. if문
    - if문은 주어진 조건이 참일 경우에 지정된 구문이 실행된다.
	
	if (조건) {			// 조건은 boolean형 만 가능
		... 실행할 구문 ..
		... 실행할 구문 ..
		... 실행할 구문 ..
	}

   - 실행할 구문이 1줄만 있는 경우에는 괄호를 생략할 수 있다.
	
	if (조건)	
		... 실행할 구문 ..

    - 조건식은 boolean형만이 가능하며, 다른 숫자는 오류를 일으킨다.

	
  3-4. if ~ else 문
    - if문이 조건이 참일 경우에 실행되는 구문이며, else문은 조건과 반대되는 경우에 실행되는 구문이다.
    - else문은 독립적으로 실행될 수 없고, 반드시 if문의 뒤에 위치해야한다.

	if (조건) {		
		... 실행할 구문 ..
	} else {
		... 조건에 반대될 시 실행할 구문 ..
	}

  3-5. if ~ else if ~ else문
    - 여러 가지 경우의 수를 분기한다.
    - if문과 else문 사이에 "else if"문으로 두번째, 세번째,... 조건을 나열할 수 있다.
    - "else if"문은 필요한 만큼 여러 개 나열할수 있으며, 필요치 않은 경우 끝의 else문은 생략해도 된다.

	if ( 1차 조건 ) {		
		... 실행할 구문 ..
	} else if ( 2차 조건 ) {
		... 실행할 구문 ..
	} else if ( 3차 조건 ) {
		... 실행할 구문 ..
	} else if ( n차 조건 ) {
		... 실행할 구문 ..
	} else {
		... n개 조건에 모두 반대될 시 실행할 구문 ..
	}

  3-6. switch문
    - 변수 값에 대한 경우의수를 처리하는 switch문
    - switch문은 하나의 변수(기준값)에 대한 여러가지 case를 정의하는 구문이다.
    - if문은 조건식(비교식, 부등식 등)이 사용될 수 있지만, switch문은 분기 조건이 반드시 일치하는 값에 대해서만 처리 가능하다.

	switch (기준값) {
	case 값1:
		.. 실행할 구문 ..
		break;
	case 값n:
		.. 실행할 구문 ..
		break;
	default: 
		..모든 경우가 충족되지 않는 경우 실행할 기본구문 ..
		break;
	}   

    - "case 값"은 필요한 만큼 여러개 나열할수 있으며, 필요치 않은 경우 끝의 "default"는 생략해도 된다.
    - 모든 case의 값이 아닌 값이 입력되더라도 실행되지 않을 뿐, 오류는 나지 않는다.
   - "break;"를 매 case마다 넣어야 한다. break; 가 없다면 조건 충족되어 실행되는 case에서부터 그 다음 break; 까지의 코드가 전부 실행된다. (똑똑하게 사용도 가능함)