국비

Zoom 회의 참가
https://us06web.zoom.us/j/6633076301?pwd=dWNHUy9icnFhMjFqVFFjNEl0TUVjUT09

회의 ID: 663 307 6301
암호: 0900k
-------------------------------------------------------------------------------------------------------------------
[공지]
* 대면시 개인 노트북 사용 가능   
* 개인이 환경 설치 가능해야합니다   
* 장소 : 서울 강남시 테헤란로 26길 12 (제일비전타워) 13층 K강의장
* 과정명 : 임베디드 소프트웨어 융합 풀스택 개발자 양성과정A(14일 ~ 21일)

[대면]
 3월 24일 목
 박종휘 박지윤 김시우 정유섭 조혜진
 김태휴 박준호 문기연 김강영

 3월 25일 금(8)
 박종휘 김강영
---------------------------------------------------------------------------------------------------------------
tms : https://itgn.cafe24.com/student/index.php
일시 : 2022-03-30(수요일, 전면 비대면)
 - 데이터베이스 구현(오전, 9시 30분 ~ 11시 50분:2시간 20분)
   * 서술형, 문제해결시나리오 : 하나의 문제, 문제해결시나리오에서 프로젝트를 *.zip으로 업로드
   -> class 2개
   -> class1 : 전역변수, 생성자, 메서드, getter, setter
   -> class2 : 객체생성, 메서드 사용
 - SQL응용(오후,2시 10분 ~ 5시 10분:3시간)
   * 중간체크 이후
   * 서술형, 평가자체크리스트 : 하나의 문제, 평가자체크리스트에서 프로젝트를 *.zip으로 업로드
   -> class 2개
   -> class1 : 전역변수, 생성자, 메서드, getter, setter
   -> class2 : 객체생성, 메서드 사용
---------------------------------------------------------------------------------------------------------------
다음시험 : 2022-04-14
다음시험 : 2022-04-28
다음시험 : 2022-05-19
---------------------------------------------------------------------------------------------------------------
자바프로젝트 - iamkj8812@gmail.com
 이름, 프로젝트 주제
 3월 23일 수업 끝나기 전까지

자바 프로젝트 완료(전면 비대면)
 4월 6일 수요일 : 발표
 발표시간 : 5분~15분
 내용 : 주제, 프로젝트 발표, 소감, ...
--------------------------------------------------------------------------------------------------------------
1. 객체형변환

	Unit u1 = army;
	Unit u2 = navy;
	Unit u3 = airforce;

	u1.attack();
	u2.attack();
	u3.attack();

	// 부모 클래스가 가지고 있는 기능이 아니므로 에러
	u1.tank();
	u2.nucleus();
	u3.bumbing();	

	-> 상속관계의 객체를 부모 형태로 변환하면, 클래스의 종류를 구분하지 않고 일괄된
	기능을 호출 할 수 있다. 객체가 상위클래스의 형태로 형변환 되더라도 Override된
	자신의 기능은 잃지 않는다.
  	-> 하지만, 추가적으로 구현한 기능은 사용할 수 없게 되므로 원래의 기능을 다시 사용할 수
	있는 방법이 필요해 졌다.

  1-1.명시적 형변환
    - 부모 클래스의 객체를 자식 클래스 형태로 변환하는 것
    - 형변환을 위해서는 다음과 같이 변환할 클래스 이름을 명시적으로 지정해 주어야 한다.

	ChildClass child = (ChildClass)parent;

  1-2. 명시적 형변환의 조건
    - 객체가 최초로 생성될 때 자식 클래스 형태로 생성되고, 부모 형태로 암묵적 형변환이 된 상태를
    다시 원래의 자식 클래스 형태로 되돌릴 경우에만 가능해진다.

	ChildClass child1 = new ChildClass();
	ParentClass parent = child1;		// 암묵적 형변환
	ChildClass child2 = (ChildClass)parent;	// 명시적 형변환

  	- 가능한 경우
	Army army1 = new Army();
	Unit u = army1;
	Army army2 = (Army)u;
	
	- 가능한 경우
	Unit u = new Navy();
	Navy navy = (Navy)u;

	- 불가능한 경우 : 최초 객체 생성이 부모 형태로 만들어진 경우 불가능하다.
	Unit u = new Unit();
	Army army = (Army)u;

	- 불가능한 경우 : 최초 생성된 것과 다른 형식으로 변환하는 것은 불가능하다.
	Army army = new Army();
	Unit u = army;
	Navy navy = (Navy)u;

2. 객체배열
  - 일반 데이터 타입의 배열과 동일한 개념으로, 같은 클래스의 객체 여러 개를 
  그룹화 할 수 있다.
  - 일반 데이터 형의 배열 생성과 객체 배열 생성 비교

	- 일반 데이터형의 배열
	int[] data = new int[3];

	- 객체 배열의 경우
	Army[] data = new Army[3];

  - 각 경우에 대한 배열의 요소 할당처리
	-> 일반 데이터 형은 단순히 값을 대입하지만, 객체 배열은 'new'를
	사용하여 객체를 할당해야 한다.
	
	- 일반 데이터 형 배열의 경우
	data[0] = 10;
	data[1] = 20;
	data[2] = 35;

	- 객체 배열의 경우
	Army a1 = new Army();
	data[0] = new Army();
	data[1] = new Army();
	data[2] = new Army();

  2-1. 정리
    - 객체 형변환
	-> 같은 부모 클래스에서 파생된 서로 다른 자식 클래스의 객체들은
	부모 형태로 암묵적 형변환 되어 일관된 형식으로 사용 간능하다.

    - 객체 배열
	->  동일한 클래스의 객체는 배열로 묶어서 여러 개를 한꺼번에
	제어할 수 있다.

  2-2. 부모 클래스의 배열에 자식 클래스의 객체를 넣기
    - 배열의 생성이 부모 클래스로 지정되었을 경우, 모든 자식 클래스의 객체들은
    그 배열에 포함 될 수 있다.

	Unit[] unit = new Unit[3];
	// 배열의 요소 할당과정에서 암묵적 형변환이 이루어진다.
	unit[0] = new Army();
	unit[1] = new Navy();
	unit[2] = new AirForce();

  2-3. 원래의 기능으로 복귀하기
    - 배열의 각 요소가 확장한 기능을 사용하기 위해서는 원래의 클래스 형태로 
    명시적 형변환이 이루어 져야 한다.
    - 하지만 반복적으로 처리되는 과정에서 몇번째 요소가 어떤 클래스에서 최초 
    생성되었는지를 판단하기란 쉽지않다.
    - instanceof 연산자
	-> instanceof 연산자는 어떤 객체에 대한 출처를 판단하여 boolean형으로
	결과를 반환한다.

	if( units[0] instanceof Army ){
		Army temp1 = (Army)units[0];
		temp1.tank();
	}
