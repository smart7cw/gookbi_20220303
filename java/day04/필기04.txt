책 추천
헤드퍼스트(다양,초급)
토비의 스프링(spring, 고급)

문제은행들 링크
jungol.co.kr	정보올림피아드	
codeup.kr		코드업
acmicpc.net	*추천* 백준닷컴 문제 단계 (1일 1문제 풀기 가능)
문제>전체 문제>1000번>제출 중 언어탭에서 JAVA11 선택
programmers.co.kr	약간 난이도 있음. 기업 코딩테스트 문제 하청기업.
oncoder.com
letcode.com
codility.com
hackerrank.com
sololearn.com

velog.io/@kmh916?tag=코딩테스트	블로그 예시
-------------------------------------------------------------------------------------
1. 반복문
  1-1. for문
    - for문은 사람이 직접 처리하기에 부담스러운 반복적인 작업을 처리하기에 매우 용이하다.
    - (1) 초기식 : 최초로  초기값을 선언 및 할당한다. ex) int i = 1;
    - (2) 조건식 : 초기식을 설정한 다음 조건식 결과가 T/F인지 판단한다.
    - (3) 반복구문 : 조건식이 참이라면 반복구문을 1회 수행한다.
    - (4) 증감식: 반복구문을 수행한 후, 증감식으로 이동하여 초기값을 늘리거나 줄인다.
    - (5) 조건식: 증감식으로 변한 새 값을 사용한 조건식의 결과가 T/F인지 판단한다. F라면 이 단계에서 for문 전체를 종료한다.
    - (3)~(5) 반복

	for (초기식 ; 조건식 ; 증감식) {
	.. 반복적으로 동작할 구문 ..
	}

	int sum = 0;
	for ( int i=1 ; i<=100 ; i++ ) {	// 위 단계에 따라 i는 "101"까지 증가한 뒤에야 조건식에서 F가 나온다.
		sum +=i;
	}			// 1부터 100까지 더한 값이 sum에 할당된다.

  1-2. while문
    - while 문은 for문과 마찬가지로 반복적인 처리를 수행하는 문법이다.
    - while문은 for문과 다르게 조건식만을 내장하기 때문에, 초기식과 증감식은 외부에 따로 정의해두어야 한다.
    - (1) 초기값 while문 밖에서 "따로" 선언 및 할당.
    - (2) 초기값에 대한 조건식 tf판정.
    - (3) 반복구문 수행.
    - (4) "따로" 작성한 증감식 수행.
    - (5) 증감이 이루어진 값 갖고 조건식 tf판정. F라면 이 단계에서 for문 전체를 종료한다.
    - (3)~(5) 반복

	초기식;
	while ( 조건식 ) {
		...반복적으로 동작할 구문 ..
		증감식
	}

  1-3. do~while문
    - 조건의 판별을 나중에 수행하는 반복문 형태
    - 초기식을 설정한 후 do{...} 안의 문장을 우선 1회 실행한 뒤에 조건을 판별하므로,
      조건이 참이 아니더라도 최소 1회는 실행된다.

	초기식;
	do {
		.. 반복적으로 동작할 구문 ..
		증감식
	}  while (조건식) ;

  1-4. 무한루프
    - 증감식이 설정되지 않거나, 증감식이 수행되더라도 조건식이 거짓이 되지 않는 형태
    - 조건식이 항상 참이므로 반복문이 종료되지 않는다.
    - PC의 자원을 매우 많이 사용하게 되므로, 시스템 다운이 발생할 수 있다.
    - 무한루프의 예
	while (true) {
		System.out.println("Hello");
	}

	for ( int i = 0 ; i < 0 ; i -- ) {
		System.out.println("Hello");
	}

2. 변수의 범위(스코프)
  2-1. 자신보다 하위 블록으로 침투할 수 있다.

	int num = 100;
	// 이 num은 if문, for문 내부로 침투 가능하다.	
	if ( num == 100) {
		System.out.println(num);
	}

	for (i=1; i<10; i++) {
			System.out.println(num + i);
	}

  2-2. 자신이 선언된 블록 밖으로는 빠져나갈 수 없다.

	int num = 100;
	if ( num == 100) {
		int result  = num + 100;
	// result는 if블럭 내부에서 선언되었으므로
	// if블럭 밖에서는 사용 불가능하다. 
	}
	System.out.println(result);	// 오류 발생

	for (i=1; i<10; i++) {
	// i는 for블럭 내부에서 선언되었으므로
	// 밖에서는 사용 불가능하다.
			...
	}
	System.out.println(i);	// 오류 발생

  2-3. 블록 안에서 선언된 변수는 블록 밖에서 존재하는 동일한 이름의 변수와는
   이름만 동일할 뿐, 다른 값으로 인식된다.

	int target = 100;
	if ( target == 100) {
		int num = target + 100;
		// 이 num은 if블록 안에만 있으므로 
		// 같은 레벨인 else블록에서도 num을 선언할 수 있다.
	} else {
		int num = target - 100;	// 에러 없음.
	}

	int target = 100;
	int num = 50;		// 상위 블록에서 이미 num 선언
	if ( target == 100) {
		int num = target + 100;
		// 이 num은 이미 상위 블록에서 선언되었으므로
		// 사용 불가능하다.
	} else {
		int num = target - 100;
		// 동일한 이유로 사용 불가능하다.
	}