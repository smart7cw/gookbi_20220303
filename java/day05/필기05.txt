----------------------------------------------------------
1. 반복문
  1-1. 반복문에서의 흐름 제어
    - break; : 반복문 안에서 break 키워드를 만나면 반복 블록을 강제로 종료한다.
    - continue; : 실행흐름이 증감식으로 강제 이동된다.

2. 배열
  - 배열 사용 전
	int dooly_kor = 75;
	int dooly_eng = 82;
	int dooly_math = 91;
	System.out.print((dooly_kor+dooly_eng+dooly_math)/3);	// 평균 내기. 사람이 많아지면 코드가 매우 길어짐.

  - 프로그램에서 처리하는 값이 많아질수록, 선언해야 하는 변수 개수가 증가하여 프로그램 소스코드가 매우 난해해진다.

  2-1. 배열이란
    - 변수를 그룹으로 묶은 형태의 한 종류로서, 사물함 같은 형태를 갖고있다.
    - 하나의 배열 안에는 같은 종류(데이터 형)의 값들만 저장될 수 있다.

  2-2. 배열을 만드는 방법 (선언 및 할당)
    - 배열의 선언
	
	데이터형[] 배열이름;

    - 배열의 생성 : 변수를 저장할 수 있는 일정 크기의 사물함을 생성한다.
	
	배열이름 = new 데이터형[크기];

    예) 3개의 int형 변수를 저장할 수 있는 배열 생성하기
	
	int[] grade;	// 데이터형은 int 배열이름은 grade로 하여, 여러개의 int형변수를 저장할 수 있는 배열을 선언한다.
	grade = new int[3];	// grade배열의 칸을 3칸으로 할당한다.

    - 배열의 모양
	-> 생성된 배열의 각각의 칸에 값이 저장되고, 각각의 칸은 "0번"부터
	일련번호가 지정된다. 일련번호 = 배열의 "인덱스" 이다. ("0번" 1번 2번 ...)

    - 배열의 선언 및 크기지정은 한번에 처리 가능하다.

	데이터형[] 배열이름 = new 데이터형[크기];
	int[] grade = new int[3];

  2-3. 배열에 값 할당하기
    - 배열은 값을 저장할 수 있는 공간일 뿐, 그 자체가 값이 아니다.
    - 값이 대입되지 않은 경우, 숫자형은 0, boolean형은 false가 자동으로 대입된다.
    - 배열 안에 값을 저장하기 위해서는 인덱스번호를 사용하여 각각의 칸에 직접 값을 대입해야 한다.

	배열이름[인덱스] = 값;
	
    - 둘리의 점수를 표현한 예)
	int[ grade = new int[3];
	grade[0] = 75;
	grade[1] = 82;
	grade[2] = 91;

  2-4. 배열의 크기 설정 + 값 할당은 일괄처리 가능하다.
    - 배열의 크기를 지정하면서 괄호 {...} 안에 배열에 포함될 각 항목을 콤마(,)로 나열하면,
    배열의 생성과 값 할당을 일괄처리할 수 있다. 이때는 배열의 크기를 따로 지정하지 않으며,
    "new int[]" 부분은 생략 가능하다.

	데이터형[] 배열이름  = new 데이터형[]{값1, 값2, 값3, ... };

	데이터형[] 배열이름  = {값1, 값2, 값3, ... };


  2-5. 배열값 사용하기
    - 배열안에 저장된 값들을 사용하여 연산, 출력 등 처리하기 위해서는 배열에 부여된
    인덱스 값을 통해서 데이터에 접근해야 한다.

	grade[0];
	System.out.println(grade[0]);	// 75가 출력된다.
	System.out.println(grade[2]);	// 91이 출력된다.
	System.out.println(grade[3]);	// 오류가 발생한다.

  2-6. 배열과 반복문
    - 배열의 특성
	-> 0~(배열크기-1) 까지의 인덱스값을 순차적으로 갖는다.
	ex) 크기3의 배열이면 인덱스를 0에서 2까지 갖는다.
    - 특성을 활용한 데이터 처리
	-> 일정 범위를 갖고 순차적으로 증가하는 인덱스의 특성을 활용하는 "반복문"을 사용하여
	배열 값을 할당하거나 읽어들이는 처리가 쉽게 가능하다.

	// 배열의 인덱스는 0부터 2까지이다.
	int[] grade = new int[]{ 100, 100, 90 };
	
	for (int i = 0; i < 3; i++) {			//인덱스에 맞게 i = 0, 1, 2 증가
		// i번째 배열값에 대한 출력 처리
		System.out.println( grade[i] );
	}

  2-7. 배열의 길이(xxx.length)
    - 배열의 길이를 얻기 위해서는 "배열이름.length" 형식으로 접근한다.
    - grade라는 배열을 생성한 경우 배열의 길이는 다음과 같다.

	int size = grade.length;

    - 배열의 길이값은 주로 반복문의 조건식에서 쉽게 반복의 범위를 지정/수정하기 위해 사용된다.

	int[] grade = new int[]{ 100, 100, 90, 95, 100, 65 };	// grade.length 없으면 grade의 길이 바뀔 때마다 for문 수정해야 함.
	
	for (int i = 0; i < grade.length; i++) {
		// i번째 배열값에 대한 출력 처리
		System.out.println( grade[i] );
	}

  2-8. 배열의 종류
    - 1차 배열
	-> 앞에서 살펴본 배열처럼 한줄만 존재하는 배열
	-> 행에 대한 개념이 없고, 열에 대한 개념만 존재하기 때문에
	"배열이름.length" 는 몇 칸인지 알아보는 기능이 된다.

  - 2차 배열
	-> 1차 배열의 각 칸에 새로운 배열을 넣는 형태
	-> 1차 배열의 각 칸은 행이 되고, 각각의 칸에 추가된 개별적인 배열이
	"열"의 개념이 되어 "행렬"을 구성하게 된다.

  2-9. 2차 배열의 생성 방법
    - 2차 배열을 선언할 때, 데이터 타입의 이름 뒤에 대괄호를 행과 열에 대하여 둘다 지정한다.

	데이터형[][] 배열이름;

    - 2차 배열의 크기지정
	-> 행과 열에 대한 크기를 명시한다.
	
	배열이름 = new 데이터형[행][열];	// [행개수][행길이]
	
    - 2차 배열의 선언 및 크기지정의 일괄처리

	데이터형[][] 배열이름  = new 데이터형[행][열];


+ 형변환의 예시들 확인
float a1 = 4/3;		// int/int 연산으로 int결과값을 float그릇에 할당함. 따라서 결과는 67->"67.0"
float a2 = 4/3f;	  	// int/float 연산으로 float결과값을 float그릇에 할당함. 따라서 결과는 67.33336->"67.33336"
float a3 = (float) 4/3;	// float/int 연산으로 계산됨. (float)4/3->4.0f/3->"1.33334"
float a4 = (float) (4/3);	// int/int 연산으로 계산됨. 1->"1.0" 


