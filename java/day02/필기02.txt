----------------------------------------------------------------------------
1. 변수
  1-1. 문자열 데이터
    - 참조변수
    - 프로그램 코드에서 "문장"을 표현하기 위해 사용되는 데이터
    - char은 기본형, String은 참조형이다.

  1-2. "S"tring (대문자 주의!)
    - 문자열을 표현하기 위한 자료형
    - 글자 수에 상관없이 쌍따옴표로 묶인 내용을 할당할 수 있다.
       vs. char은 글자 수만큼 byte 용량을 차지한다.
    - 숫자든 문자든 쌍따옴표로 묶이게 되면 전부 문자열로 취급된다. 따라서 숫자를 적을 때와 문자열 적을 때를 잘 구분해야 한다.

  1-3. 변수의 사용방법
    - 변수를 사용하는 방법은 "선언"과 "할당"의 두 영역으로 나뉜다.
    - 선언 -> 데이터 형 + 사용하고자 하는 변수의 이름을 지정한 후, 세미콜론(;)으로 한 라인을 종료한다.
	데이터형 변수이름;  //자료형 라벨이 붙은 그릇 생성 
              ex) int num1;
    
    - 할당 -> 선언된 변수에 원하는 값을 대입한다. 값의 대입은 대입연산자 "="를 사용하여 우변에서 좌변으로 대입한다.
	 할당 시 변수의 데이터형에 맞는 값만 넣을 수 있다.
	변수이름 = 할당할 값;  //그릇에 알맞는 값 넣기
              ex) num1 = 100;

    - 선언과 할당의 통합
	
	데이터형 변수이름 = 값;
              ex) int num1 = 100;  // 그릇라벨 그릇이름 = 그릇내용;

  1-4. 문자열 데이터
    - String형의 변수를 선언하고, 쌍따옴표로 묶인 값을 대입한다.
    - 빈 문자열이나 공백도 문자열 데이터이다.

	String msg = "  안녕하세요. 자바    "; //문장 표현 가능, 공백 포함됨
	String blank = "";  //빈 문자열 표현 가능
	String age = "25"  //숫자를 문자열로 표현 가능

    - 문자열 데이터의 덧셈
	-> 문자열 + 문자열 : 두 문장을 하나로 합쳐준다.
	
	String language1 = "JAVA";
	String language2 = "JA" + "VA";
	String language3 = "J" + "AVA";

    - 문자열(참조자료형) + 기본자료형
	-> 에러X, 기본자료형의 데이터가 문자열로 자동 변환되고, 두 문장이 합쳐진 문자열이 완성된다.

	int age =20;
	String name = "자바학생";
	String result = name + age;  // "자바학생20"

  1-5. 변수 이름 명명 규칙
    - 변수 이름은 영문, 숫자, _, $ 만 사용 가능하다.
    - 변수 이름의 첫 글자는 숫자로 시작될 수 없다.
    - 대/소문자를 엄격하게 구분하므로 오타에 주의해야 한다.
    - 자바에서 사용하는 예약어(키워드)를 변수 이름으로 사용할 수 없다.  ex) String, int, double 등
    - myName(O) myname(X) my_name(O) 명명법을 되도록 통일되게, 가독성 좋게 한다.
    - 클래스 이름의 명명 규칙도 동일 + 클래스 이름은 되도록 대문자로 시작하게 한다.

  1-6. 값의 할당(대입) 방법
    - boolean은 true(참) false(거짓) 중 한 가지만 할당된다.
	boolean isKorean = true;
	boolean isJapanese = false;
	!true  // False 결과가 나온다.
	!false  // True 결과가 나온다.
	!(100 > 200)  //    True 결과가 나온다.

    - char는 홀따옴표(')로 감싸고 한 글자만 할당할 수 있다.
	char first = '곽';

    - long, float, double은 다른 데이터형과의 구별을 위해 값 뒤에 데이터형의 첫글자를 접미사로 갖는다.
       단, float는 반드시 접미사가 필요하다. (없으면 에러남)
       접미사는 대/소문자를 가리지 않지만 가급적 대문자를 사용하는게 좋다.
	long money = 500000000L;
	float Pi = 3.14F;
	double lat = 128.32542D;

    - 생성된 변수는 다른 변수에 할당될 수 있다.
	int num1 = 100;  //num1그릇에 100 넣기
	int num2 = num1;  //num2그릇에 num1에 들어있는 100 넣기

  1-7. 변수 사용의 제약
    - 한 변수에 반복하여 다른 값을 할당할 수 있지만, 동일한 이름의 변수는 선언이 불가능하다. 
	int num1 = 100;
	num1 =200;  //가능.
	num1= 300;  //가능.
	int num1 =400;  //불가능.

    - 선언되지 않은 변수는 사용할 수 없다.
	int num1 = 100;
	num1 = 200;  //가능.
	num2 = 300; //불가능.

    - 값이 대입되지 않은 변수는 다른 변수에 대입하거나 출력할 수 없다.
	int num1;
	int num2 = num1;  //num2에 할당할 값이 num1에 없으므로 에러 발생
	System.out.println(num1);  //2번째줄 없어도 할당된 값이 없으므로 에러 발생

     src 우클릭 > new > package > 이름 설정 > finish
     package 이름 우클릭 > new > class > 이름 및 public~ 설정 > finish

     빨간색 줄 = 명백히 에러.
     노란색 줄 = 경고. 무시해도 됨.  ex) int num1; num1이 선언만 되고 사용하는 곳이 없으므로 "경고"로 표시됨

  1-8. 상수 (final ~ )
    - 변하지 않는 수
    - 변수처럼 메모리에는 존재하지만, 값이 변경될 수 없는 데이터
    - 메모리 상에 접근은 가능하지만, 할당한 값을 변경할 수는 없다.
    - "final" 키워드를 맨앞에 추가로 사용하여 변수를 선언하면 상수로 생성된다.
	
	final int age = 20;
	final long money = 120000L;
	final float PI = 3.14F;

2. 연산자
  2-1. 연산자란
    - 프로그램에서 연산을 수행하기 위해 사용하는 특수기호들

  2-2. 연산자의 종류
    - 대입 연산자(=)
	-> 변수에 숫자나 문자열 등의 자료를 입력하거나 연산 결과를 다른 변수에 할당한다.
    - 사칙 연산자
	-> 더하기(+), 빼기(-), 곱하기(*), 나눗셈의 몫(/), 나머지(%)
    - 단항 연산자
	-> 변수에 대한 연산 결과를 다시 자기자신에게 적용하는 경우 사용한다.
    - 증감 연산자
	-> 특정 변수에 저장되어 있는 값을 1씩 증가/감소시킬 경우 사용한다.
    - 비교 연산자
	-> 두 개의 변수값 간의 관계를 비교하고 참(true) 또는 거짓(false)을 반환한다.
    - 논리 연산자
	-> 좌변과 우변을 논리연산하고, 참일 때는 true, 거짓일 때는 false를 반환한다.

  2-3. 사칙연산자
    - 일반적인 더하기(+), 빼기(-), 곱하기(*), 나눗셈(/,%)을 수행한다.
    - 사칙연산의 결과는 대입 연산자 =를 통해 다른 변수에 할당될 수 있다.
             ex)int num1 = 10 - 5;
    - 정수(byte, short, int, long)와 실수(float, double)의 연산시 정수가 실수로 자동변환되어 처리되므로, 결과는 실수이다.
    - 나눗셈에서 주의사항: 10 나누기 3을 할 때 몫3 나머지1로 생각되지만 연산자는 2개로 구분된다.
		  : 0으로 나누기는 불가능하다.
             		ex) 10 / 3 : 나눗셈의 몫만을 취하여 결과값은 "3"
             		ex) 10 % 3 : 나눗셈의 나머지만을 취하여 결과값은 "1"
    - 연산자 우선순위
	-> * / % 은 + - 보다 우선한다.
	-> 여러 연산자를 복합적으로 사용할 경우 괄호로 묶여 있는 연산자를 우선한다.
        	ex) 3 + 5 / (10-5) 는 -, /, + 순으로 계산된다.

  2-4. 단항 연산자
    - 어떤 변수의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자 하는 경우의 약식 표현
	int x = 100;
	x = x + 5;  // x의 값에 5를 더한 값을 다시 x에 재할당한다
	x += 5; //위 연산을 단항 연산자로 표현할 수 있다.
    - 단항 연산자는 모든 사칙연산자로 표현 가능하다. 이때 사칙연산자와 =를 띄어놓으면 에러가 난다.
	-> +=, -=, *=, /=, %=

  2-5. 증감 연산자
    - 계산 대상 값이 1인 덧셈, 뺄셈 단항 연산자로 표현한 식의 약식 표현
    - 덧셈의 경우
	x = x + 1;  //사칙 연산자 사용
	x += 1;  //단항 연산자 사용
	x++;  //증감 연산자 사용, 이 줄의 연산 및 대입 완료 "후 1 증가"
	++x;  //증감 연산자 사용, "1 증가 후" 이 줄의 연산 및 대입 진행

    - 뺄셈의 경우
	x = x - 1;  //사칙 연산자 사용
	x -= 1;  //단항 연산자 사용
	x--;  //증감 연산자 사용, 이 줄의 연산 및 대입 완료 "후, 1 감소"
	--x;  //증감 연산자 사용, "1 감소 후," 이 줄의 연산 및 대입 진행
    
    - "x++"와 "++x"의 차이
	-> 증감 연산자는 그 자체가 다른 연산식의 피연산자로 사용될 수 있다. 이때, 증감연산자의 표시 위치에 따라 연산이 다른 타이밍에 적용된다.
    - x++
	-> 증감 연산자가 뒤에 표시되는 경우, 현재 x의 값을 먼저 수식에 적용하고, 나중에 x에 대한 1 증가 처리를 한다.
          ex1) int a = 100;
	int x =1;
	int y = a + x++;  // a+x를 하여  y가 101이 할당된 후에, x가 1증가하여 2가 된다.

          ex2) int x = 1;
	int y = 3 + 4 * (3- x++);   // 3+4*(3-1) 계산을 먼저 하여 y에 11이 할당된 후에, x가 1증가하여 2가 된다.

    - ++x
	-> 증감 연산자가 앞에 표시되는 경우, x에 대한 1 증가 처리를 먼저 하고, 증가한 x값을 수식에 적용한다.
          ex1) int a = 100;
	int x =1;
	int y = a + ++x;  // x가 1증가하여 2가 된 후, a+x를 하여  y가 102가 할당된다.

          ex2) int x = 1;
	int y = 3 + 4 * (3- ++x);   //x가 1증가하여 2가 된 후에, 3+4*(3-2) 계산을 하여 y에 7이 할당된다.

  2-6. 비교 연산자
    - 같다, 다르다, 크다, 크거나 같다, 작다, 작거나 같다에 대한 비교를 수행하는 연산자
    - 비교 연산자에서는 "="가 항상 뒤에 위치한다!

	같다	==
	다르다	!=
	초과	>
	이상	>=
	미만	<
	이하	<=

    - 주어진 식이 참/거짓인지만 판별 가능하므로, 연산 결과는 boolean 값으로 생성된다.