[필기06]
  2-8. 배열의 종류
    - 1차 배열
	-> 앞에서 살펴본 배열처럼 한줄만 존재하는 배열
	-> 행에 대한 개념이 없고, 열에 대한 개념만 존재하기 때문에
	"배열이름.length" 는 몇 칸인지 알아보는 기능이 된다.

  - 2차 배열
	-> 1차 배열의 각 칸에 새로운 배열을 넣는 형태
	-> 1차 배열의 각 칸은 행이 되고, 각각의 칸에 추가된 개별적인 배열이
	"열"의 개념이 되어 "행렬"을 구성하게 된다.

  2-9. 2차 배열의 생성 방법
    - 2차 배열을 선언할 때, 데이터 타입의 이름 뒤에 대괄호를 행과 열에 대하여 둘다 지정한다.

	데이터형[][] 배열이름;

    - 2차 배열의 크기지정
	-> 행과 열에 대한 크기를 명시한다.
	
	배열이름 = new 데이터형[행][열];	// [행개수][행길이]
	
    - 2차 배열의 선언 및 크기지정의 일괄처리

	데이터형[][] 배열이름  = new 데이터형[행][열];

-------------------------------------------------------------------------------------------------
1. 배열
  1-1. 2차 배열
    - 2차원 배열의 선언, 크기지정, 값의 할당은 다음과 같이 가능하다.
	-> 2차원 배열은 블록괄호 "{}"를 2중으로 겹쳐서 2차원 배열을 표현한다.
	-> 행과 열의 구분에는 콤마(,)를 사용한다.
	-> 컴파일러가 블록괄호 "{}"의 요소를 파악하면 행, 열의 크기가 산출될 수 있으므로
	배열의 크기 설정을 위한 [][]에는 배열의 크기를 따로 명시하지 않는다.

	데이터형[][] 배열이름 = new 데이터형[][]{
		{0행0열, 0행1열, ... ,0행m열의 값},
		{1행0열, 1행1열, ... ,1행m열의 값},
		...
		{n행0열, n행1열, ... ,n행m열의 값}
	};

  1-2. 2차원 배열에 대한 값의 대입 방법
    - 행, 열에 대한 인덱스 번호를 통해서 값을 대입한다.
	
	배열이름[행번호][열번호] = 값;

    - int[][] grade = new int[3][3];
	grade[0][0] = 75;
	grade[0][1] = 82;
	grade[0][2] = 91;
      	...

    - 2차원 배열의 선언, 크기지정, 값의 할당은 일괄처리도 가능하다.

	int[][] grade = new int[][]{
		{75, 82, 91},
		{88, 64, 50},
		{100, 100, 90}
	};

	// 가독성을 위해 엔터를 사용해 자유롭게 배치가 가능함.
	// 중간에 중괄호, 콤마만 제대로 넣으면 오류 나지 않음.
	int[][] grade = {{75, 82, 91}, {88, 64, 50},{100, 100, 90}};

  1-3. 2차원 배열의 길이
    - 2차원 배열의 길이는 행/열에 대한 측면을 둘로 나누어서 생각해야 한다.
    - 행의 길이 : 1차원 배열의 길이 xxx.length 로 조회한다.
	int rows = grade.length;	// 행의 길이

    - 열의 길이 : 각 행에 대해 개별적으로 xxx[i].length 로 조회한다.
	int cols = grade[1].length;	// 2번째 열의 길이


2. 메서드
 2-1. 프로그램의 시작점
  - main은 java 프로그램이 시작되는 시작점을 의미한다.
  - main은 public, static, void, main, (String[] args) 이라는 키워드로 구성된 하나의 {...} 블록이다.
  - "main"은 시작점 이라는 뜻이 담긴 예약어. class를 실행할 때 가장 먼저 main 이름의 메서드를 먼저 읽는다.

  2-2. 다른 이름의 메서드 만들기

	f(x) = x + 1  <- f:함수이름 x:매개변수 x+1:식
	함수 f는 여러번 사용할 수 있고, 매개변수 x에 어떤 수를 넣느냐에 따라 다른 결과가 출력된다.
	이러한 함수를 프로그램한 것을 메서드 라고 할 수 있다.

  2-3. 프로그램의 함수 = 메서드
    - 특정 기능을 그룹화해서 재사용하기 위한 단위

	public static void 메서드이름() {		// 새 메서드의 정의 예시
		.. 수행할 연산식 ...
	}

  2-4. 메서드의 호출
    - 정의된 메서드는 다른 메서드를 구성하는 {...} 안에서 다음과 같은 형식으로 사용할 수 있으며,
    이를 "메서드를 호출한다"라고 한다.

	메서드이름();

method>Main1 중...
- main메서드 밖에 f메서드 생성시키기만 한 뒤에 실행하면, main메서드만 실행되어 아무것도 출력되지 않는다.
- f는 단순 정의되어 있는 상태이지 실행되지 않는다.
- 메서드는 여러번 호출도 가능하다.

  2-5. 메서드 파라미터(매개변수)
    - java 프로그램의 메서드는 자신이 실행되는 데에 필요한 조건값을
    메서드 이름 뒤 괄호 안에서 변수 형태로 선언한다. 이를 "메서드 파라미터" 또는 "매개변수" 라고 한다.

  2-6. 다중 파라미터
    - 메서드가 연산을 수행하는 데에 두 개 이상의 파라미터가 필요하다면 콤마(,)로 구분하여 선언할 수 있다.

	// 메서드 파라미터 정의 예시. 다중 파라미터 가능함.
	public static void 메서드이름( 변수형 변수이름, 변수형 변수이름, ... ) {
		.. 수행할 연산식 ...
	}

	public static void f( int x, int y ) {	
		int z = x + y + 1;
		System.out.println(z);
	}

  2-7. 파라미터를 갖는 메서드의 호출
    - 메서드 정의하면서 파라미터가 명시되어 있다면, 해당 메서드를 호출할 때
    파라미터를 꼭 전달해주어야 한다.
    - 파라미터가 없다면 오류가 발생한다.

	메서드이름( 값1, 값2, ... );

  2-8. 메서드의 리턴값
    - 메서드가 연산 결과를 자신이 호출된 위치에 반환하는 것을 "리턴" 또는 "반환"이라고 하며, 반환되는 값을 "리턴값"이라고 한다.
    - 메서드 안에서 값을 리턴하기 위해서는 "return" 이라는 키워드가 사용된다.
    - 값을 리턴하는 메서드는 선언시 "void" 키워드 대신, 리턴하는 값의 변수형이 명시된다.
    - 리턴값이 없다면 선언시 "void"를 입력한다.

	public static 리턴형 메서드이름( 변수형 변수이름, 변수형 변수이름, ... ) {
		.. 수행할 연산식 ...
		return 리턴값;
	}

    - 리턴값보다 리턴형의 범위가 더 넓다면 암묵적 형변환된 값이 반환된다.  ex) float 메서드에서 return 5; 하면 5.0이 반환됨

  2-9. 두 개의 함수를 연립하여 사용하기

	f1(x) = x + 1
	f2(y) = f1(y) + 10
	k = f2(5)
	-> f1(5) + 10 
	-> 5 + 1 + 10
	-> 16
	메서드도 위와 같이 연립이 가능하다.

  2-10. 메서드 간의 상호 호출
    - java의 메서드도 서로 호출하는 것이 가능하다. 호출된 메서드가 값을 리턴하는 경우,
    리턴값을 다른 연산에 사용할 수 있다.
    - 상호 호출된 메서드들은 위치에 상관없이 호출 가능하다.
    - 예를 들어, 코드 맨아래에 있는 메서드를 그보다 위에 위치한 메서드에서도 호출 가능하다.